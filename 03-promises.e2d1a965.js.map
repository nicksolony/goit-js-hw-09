{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAKIC,GAHaC,SAASC,cAAc,qBACxBD,SAASC,cAAc,oBACrBD,SAASC,cAAc,sBAC5BD,SAASC,cAAc,SAChCC,EAAU,GAqCd,SAASC,EAAcC,EAAUC,GAC9B,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,uBAAwCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAErDG,EAAK,sBAAqCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAElDA,E,IA5CTN,EAAOe,iBAAiB,UAAU,SAACC,GASnC,IAA0BC,EAPxBD,EAAEE,iBAeJ,SAAqBC,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,GAAG,EAAG,CAErChB,EAAcgB,EAAE,EADEE,SAASH,EAAKb,OAASgB,SAASF,EAAED,EAAKI,OAEzDC,MAAM,SAAAC,GACJ3B,EAAA4B,OAAOC,QAAQF,EAAM,CACnBG,SAAS,G,IAGbC,OAAO,SAAAJ,GACL3B,EAAA4B,OAAOI,QAAQL,EAAM,CACnBG,SAAS,G,KAxBfG,EAKwBd,EALKD,EAAEgB,OAMbC,MAAMC,KAAKjB,GACnBkB,QAAO,SAACC,G,MAAe,WAAVA,EAAGC,I,IAAiBC,SAAS,SAACC,GACnDpC,EAAQ,GAAcW,OAAXyB,EAAMC,OAASD,EAAMd,K,IAE3BtB,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nlet delayInput = document.querySelector('input[name=delay]');\nlet stepInput = document.querySelector('input[name=step]');\nlet amountInput = document.querySelector('input[name=amount]');\nlet formEl = document.querySelector('form'); \nlet formObj = {};\n\nformEl.addEventListener('submit', (e) => {\n\n  e.preventDefault();\n  \n  runPromises(createFormObject(e.target));\n\n});\n\n\nfunction createFormObject(formData) {\n  const formArray = Array.from(formData);\n  formArray.filter((el)=>el.type==='number').forEach ((input) => {\n    formObj[`${input.name}`]= input.value;\n  });\n  return formObj;\n};\n\nfunction runPromises(form) {\n  for (let i = 0; i < form.amount; i+=1) {\n    const stepDelay = parseInt(form.delay) + parseInt(i*form.step);\n    createPromise(i+1, stepDelay).\n    then (value => {\n      Notify.success(value,{\n        useIcon: false\n      });\n    }).\n    catch (value=>{\n      Notify.failure(value,{\n        useIcon: false\n      });\n    });  \n  };\n};\n\n\nfunction createPromise(position, delay) {\n   return new Promise ((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        } else {\n         reject(`❌ Rejected promise ${position} in ${delay}ms`);    \n        }\n      }, delay);\n    });\n};\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$formObj","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","addEventListener","e","formData","preventDefault","form","i","amount","parseInt","step","then","value","Notify","success","useIcon","catch","failure","$ce04d3a99e08e73b$var$runPromises","target","Array","from","filter","el","type","forEach","input","name"],"version":3,"file":"03-promises.e2d1a965.js.map"}